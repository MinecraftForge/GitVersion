import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import com.github.jengelman.gradle.plugins.shadow.tasks.DependencyFilter
import com.github.jengelman.gradle.plugins.shadow.ShadowJavaPlugin
import org.gradle.api.attributes.plugin.GradlePluginApiVersion

plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    alias libs.plugins.licenser
    alias libs.plugins.javadoc.links
    alias libs.plugins.gradleutils
    alias libs.plugins.gitversion
    alias libs.plugins.changelog
    alias libs.plugins.plugin.publish
    alias libs.plugins.shadow
}

final projectDisplayName = 'Git Version Gradle Plugin'
final projectArtifactId = base.archivesName = 'gitversion-gradle'
description = 'A gradle plugin for using Git Version to manage version numbers.'
group = 'net.minecraftforge'
version = gitversion.tagOffset

println "Version: $version"

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
    withSourcesJar()
    withJavadocJar()
}

configurations {
    // Applies the "Gradle Plugin API Version" attribute to configuration
    // This was added in Gradle 7, gives consumers useful errors if they are on an old version
    def applyGradleVersionAttribute = { Configuration configuration ->
        configuration.attributes {
            attribute(GradlePluginApiVersion.GRADLE_PLUGIN_API_VERSION_ATTRIBUTE, objects.named(GradlePluginApiVersion, libs.versions.gradle.get()))
        }
    }

    named(JavaPlugin.RUNTIME_ELEMENTS_CONFIGURATION_NAME, applyGradleVersionAttribute)
    named(ShadowJavaPlugin.SHADOW_RUNTIME_ELEMENTS_CONFIGURATION_NAME, applyGradleVersionAttribute)
}

dependencies {
    // Static Analysis
    compileOnly libs.nulls

    // Gradle API
    compileOnly libs.gradle

    implementation libs.gradleutils.shared
    compileOnly libs.gradleutils.plugin

    // Git Version
    implementation libs.gson
}

// Removes local Gradle API from compileOnly. This is a workaround for bugged plugins.
// TODO [GradleUtils][GradleAPI] Remove this once they are fixed.
// Publish Plugin: https://github.com/gradle/plugin-portal-requests/issues/260
// Shadow:         https://github.com/GradleUp/shadow/pull/1422
afterEvaluate { project ->
    project.configurations.named(JavaPlugin.COMPILE_ONLY_CONFIGURATION_NAME) { compileOnly ->
        compileOnly.dependencies.remove(project.dependencies.gradleApi())
    }
}

license {
    header = rootProject.file('../LICENSE-header.txt')
    newLine = false
    exclude '**/*.properties'
}

tasks.named('jar', Jar) {
    archiveClassifier = 'thin'
}

tasks.named('shadowJar', ShadowJar) {
    enableAutoRelocation =  true
    archiveClassifier = null
    relocationPrefix = 'net.minecraftforge.gitversion.gradle.shadow'
}

tasks.withType(GroovyCompile).configureEach {
    groovyOptions.optimizationOptions.indy = true
}

tasks.withType(Javadoc).configureEach {
    javadocTool = javaToolchains.javadocToolFor { languageVersion = JavaLanguageVersion.of(24) }

    options { StandardJavadocDocletOptions options ->
        options.windowTitle = projectDisplayName + project.version
        options.tags 'apiNote:a:API Note:', 'implNote:a:Implementation Note:'
    }
}

changelog {
    fromBase()
    publishAll = false
}

gradlePlugin {
    website.set gitversion.url
    vcsUrl.set gitversion.url + '.git'

    plugins {
        register('gitversion') {
            id = 'net.minecraftforge.gitversion'
            implementationClass = 'net.minecraftforge.gitversion.gradle.GitVersionPlugin'
            displayName = projectDisplayName
            description = project.description
            tags.set(['git', 'version'])
        }

        register('changelog') {
            id = 'net.minecraftforge.changelog'
            implementationClass = 'net.minecraftforge.gitversion.gradle.changelog.ChangelogPlugin'
            displayName = 'Git Changelog'
            description = 'Creates a changelog text file based on git history using GitVersion.'
            tags.set(['git', 'changelog'])
        }
    }
}

publishing {
    publications.register('pluginMaven', MavenPublication) {
        artifactId = projectArtifactId
        changelog.publish it

        pom { pom ->
            name = projectDisplayName
            description = project.description

            gradleutils.pom.addRemoteDetails(pom)

            licenses {
                license gradleutils.pom.licenses.LGPLv2_1
            }

            developers {
                developer gradleutils.pom.developers.Jonathing
            }
        }
    }

    repositories {
        maven gradleutils.getPublishingForgeMaven(rootProject.file('../repo'))
    }
}

idea.module { downloadSources = downloadJavadoc = true }
eclipse.classpath { downloadSources = downloadJavadoc = true }
